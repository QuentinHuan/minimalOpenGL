////////////////////////////////
// hello.cpp file
////////////////////////////////
#include <iostream>
int main()
{
    std::cout << "oui bonjour\n";
    return 0;
}

###############################
##simplest CMakeList.txt :
###############################
cmake_minimum_required(VERSION 3.16.3)

# set the project name
project(MinimalOpenGL)

# add the executable
add_executable(main src/main.cpp)

============================================
use cmd 'cmake -version' for 'cmake_minimum_required'
----------------------------------------------------------------------------------------------
////////////////////////////////
// hello.cpp with headers in include folder
////////////////////////////////
#include <iostream>
#include <test.h>
int main()
{
   printf("oui bonjour : %d\n",i);
    return 0;
}

###############################
##CMakeList.txt :
###############################
cmake_minimum_required(VERSION 3.16.3)
project(MinimalOpenGL)
 
#headers directory
include_directories(include)
  
#source directory
file(GLOB SOURCES "src/*.cpp")
 
add_executable(main ${SOURCES})

----------------------------------------------------------------------------------------------

////////////////////////////////
// hello.cpp with SDL2
////////////////////////////////
#include "SDL.h" 

int main(int argc, char *argv[])
{
  SDL_Init(SDL_INIT_VIDEO);

  SDL_Window *window = SDL_CreateWindow(
    "SDL2Test",
    SDL_WINDOWPOS_UNDEFINED,
    SDL_WINDOWPOS_UNDEFINED,
    640,
    480,
    0
  );

  SDL_Renderer *renderer = SDL_CreateRenderer(window, -1, SDL_RENDERER_SOFTWARE);
  SDL_SetRenderDrawColor(renderer, 0, 0, 0, SDL_ALPHA_OPAQUE);
  SDL_RenderClear(renderer);
  SDL_RenderPresent(renderer);

  SDL_Delay(3000);

  SDL_DestroyWindow(window);
  SDL_Quit();

  return 0;
}

###############################
##CMakeList.txt :
###############################
cmake_minimum_required(VERSION 3.16.3)
project(MinimalOpenGL)
 
#headers directory
include_directories(include)

#source directory
file(GLOB SOURCES "src/*.cpp")

#sdl linking
find_package(SDL2 REQUIRED) #REQUIRED ==> stop if not found
include_directories(${SDL2_INCLUDE_DIRS})
 
add_executable(main ${SOURCES})
target_link_libraries(main ${SDL2_LIBRARIES})

----------------------------------------------------------------------------------------------